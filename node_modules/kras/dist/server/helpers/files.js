"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withFiles = exports.getClient = void 0;
const readFile = require("send");
const path_1 = require("path");
const fs_1 = require("fs");
// this only exists to trick "ncc" -> otherwise it tries to resolve it
// directly at compile-time
const indexHtml = [0].map(() => 'index.html').pop();
function checkExists(dir) {
    return new Promise((resolve) => fs_1.exists(dir, resolve));
}
function getClient(cwd, path) {
    return __awaiter(this, void 0, void 0, function* () {
        const fullPath = path_1.resolve(cwd, path);
        if (!(yield checkExists(fullPath))) {
            const indexPath = path_1.resolve(fullPath, indexHtml);
            if (yield checkExists(indexPath)) {
                return indexPath;
            }
            try {
                const mainPath = require.resolve(path, {
                    paths: [__dirname, process.cwd(), cwd],
                });
                const mainDir = path_1.dirname(mainPath);
                return path_1.resolve(mainDir, indexHtml);
            }
            catch (_a) { }
        }
        return fullPath;
    });
}
exports.getClient = getClient;
function withFiles(server, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const api = config.api;
        if (api !== false) {
            const prefix = `${api}/static/`;
            const client = yield getClient(config.directory, config.client);
            const root = path_1.dirname(client);
            const options = { root };
            server.at(api, 'static/*').get((req, res) => {
                const path = req.url.substring(prefix.length);
                readFile(req, path, options).pipe(res);
            });
        }
    });
}
exports.withFiles = withFiles;
