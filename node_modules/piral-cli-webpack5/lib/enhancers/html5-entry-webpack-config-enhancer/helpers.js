"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setEntries = exports.replaceEntries = exports.getTemplates = exports.extractParts = exports.isLocal = void 0;
function isLocal(path) {
    if (path) {
        if (path.startsWith(':')) {
            return false;
        }
        else if (path.startsWith('http:')) {
            return false;
        }
        else if (path.startsWith('https:')) {
            return false;
        }
        else if (path.startsWith('data:')) {
            return false;
        }
        return true;
    }
    return false;
}
exports.isLocal = isLocal;
function extractParts(content) {
    const sheets = content('link[href][rel=stylesheet]')
        .filter((_, e) => isLocal(e.attribs.href))
        .remove()
        .toArray();
    const scripts = content('script[src]')
        .filter((_, e) => isLocal(e.attribs.src))
        .remove()
        .toArray();
    const files = [];
    for (const sheet of sheets) {
        files.push(sheet.attribs.href);
    }
    for (const script of scripts) {
        files.push(script.attribs.src);
    }
    return files;
}
exports.extractParts = extractParts;
function getTemplates(entry) {
    if (typeof entry === 'string' && entry.endsWith('.html')) {
        return [entry];
    }
    else if (Array.isArray(entry)) {
        return entry.filter((e) => e.endsWith('.html'));
    }
    else if (typeof entry !== 'function') {
        return Object.values(entry).flatMap((value) => getTemplates(value));
    }
    return [];
}
exports.getTemplates = getTemplates;
function replaceEntries(existingEntries, oldEntry, newEntries) {
    for (let i = 0; i < existingEntries.length; i++) {
        if (existingEntries[i] === oldEntry) {
            existingEntries.splice(i, 1, ...newEntries);
            break;
        }
    }
}
exports.replaceEntries = replaceEntries;
function setEntries(config, template, entries) {
    if (typeof config.entry === 'string') {
        config.entry = entries;
    }
    else if (Array.isArray(config.entry)) {
        replaceEntries(config.entry, template, entries);
    }
    else if (typeof config.entry !== 'function') {
        Object.keys(config.entry).forEach((key) => {
            const value = config.entry[key];
            if (value === template) {
                config.entry[key] = entries;
            }
            else if (Array.isArray(value)) {
                replaceEntries(value, template, entries);
            }
        });
    }
}
exports.setEntries = setEntries;
//# sourceMappingURL=helpers.js.map