"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugPiral = exports.debugPiralDefaults = void 0;
const path_1 = require("path");
const kras_1 = require("kras");
const bundler_1 = require("../bundler");
const types_1 = require("../types");
const common_1 = require("../common");
exports.debugPiralDefaults = {
    entry: './',
    port: common_1.config.port,
    publicUrl: '/',
    logLevel: types_1.LogLevels.info,
    open: common_1.config.openBrowser,
    hmr: true,
    optimizeModules: false,
};
function debugPiral(baseDir = process.cwd(), options = {}) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiralDefaults.entry, open = exports.debugPiralDefaults.open, hmr = exports.debugPiralDefaults.hmr, port: originalPort = exports.debugPiralDefaults.port, publicUrl: originalPublicUrl = exports.debugPiralDefaults.publicUrl, logLevel = exports.debugPiralDefaults.logLevel, optimizeModules = exports.debugPiralDefaults.optimizeModules, _ = {}, hooks = {}, bundlerName, } = options;
        const publicUrl = (0, common_1.normalizePublicUrl)(originalPublicUrl);
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        (0, common_1.setLogLevel)(logLevel);
        yield ((_a = hooks.onBegin) === null || _a === void 0 ? void 0 : _a.call(hooks, { options, fullBase }));
        (0, common_1.progress)('Reading configuration ...');
        const entryFiles = yield (0, common_1.retrievePiralRoot)(fullBase, entry);
        const targetDir = (0, path_1.dirname)(entryFiles);
        const { externals, name, root, ignored } = yield (0, common_1.retrievePiletsInfo)(entryFiles);
        yield (0, common_1.checkCliCompatibility)(root);
        yield ((_b = hooks.beforeBuild) === null || _b === void 0 ? void 0 : _b.call(hooks, { root, publicUrl, externals, entryFiles, name }));
        const bundler = yield (0, bundler_1.callPiralDebug)({
            root,
            piral: name,
            optimizeModules,
            hmr,
            externals,
            publicUrl,
            entryFiles,
            logLevel,
            ignored,
            _,
        }, bundlerName);
        bundler.ready().then(() => (0, common_1.logDone)(`Ready!`));
        bundler.on((args) => {
            var _a;
            (_a = hooks.afterBuild) === null || _a === void 0 ? void 0 : _a.call(hooks, Object.assign(Object.assign({}, args), { root, publicUrl, externals, entryFiles, name, bundler }));
        });
        const krasBaseConfig = (0, path_1.resolve)(fullBase, kras_1.krasrc);
        const krasRootConfig = (0, path_1.resolve)(root, kras_1.krasrc);
        const mocks = (0, path_1.join)(targetDir, 'mocks');
        const baseMocks = (0, path_1.resolve)(fullBase, 'mocks');
        const mocksExist = yield (0, common_1.checkExistingDirectory)(mocks);
        const sources = [mocksExist ? mocks : undefined].filter(Boolean);
        const initial = (0, common_1.createInitialKrasConfig)(baseMocks, sources);
        const required = {
            injectors: {
                piral: {
                    active: true,
                    handle: ['/'],
                    publicUrl,
                    bundler,
                },
                pilet: {
                    active: false,
                },
            },
        };
        const port = yield (0, common_1.getAvailablePort)(originalPort);
        const krasConfig = (0, kras_1.readKrasConfig)({ port, initial, required }, krasBaseConfig, krasRootConfig);
        (0, common_1.log)('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = (0, kras_1.buildKrasWithCli)(krasConfig);
        krasServer.removeAllListeners('open');
        krasServer.on('open', (0, common_1.notifyServerOnline)([bundler], publicUrl, krasConfig.api));
        yield ((_c = hooks.beforeOnline) === null || _c === void 0 ? void 0 : _c.call(hooks, { krasServer, krasConfig, open, port, publicUrl }));
        yield krasServer.start();
        (0, common_1.openBrowser)(open, port, publicUrl, !!krasConfig.ssl);
        yield ((_d = hooks.afterOnline) === null || _d === void 0 ? void 0 : _d.call(hooks, { krasServer, krasConfig, open, port, publicUrl }));
        yield new Promise((resolve) => krasServer.on('close', resolve));
        yield ((_e = hooks.onEnd) === null || _e === void 0 ? void 0 : _e.call(hooks, {}));
    });
}
exports.debugPiral = debugPiral;
//# sourceMappingURL=debug-piral.js.map