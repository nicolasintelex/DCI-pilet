"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPilet = exports.debugPilet = exports.buildPiral = exports.watchPiral = exports.debugPiral = void 0;
const path_1 = require("path");
const child_process_1 = require("child_process");
const utils_1 = require("piral-cli/utils");
const parcel_1 = require("./parcel");
async function buildDependencies(args, cacheDir) {
    const path = (0, path_1.resolve)(__dirname, 'parcel', `dependency.js`);
    const cwd = process.cwd();
    for (const dependency of args.importmap) {
        if (dependency.type === 'local') {
            await new Promise((resolve, reject) => {
                const ps = (0, child_process_1.fork)(path, [], { cwd });
                ps.on('message', (msg) => {
                    switch (msg.type) {
                        case 'done':
                            return resolve();
                        case 'fail':
                            return reject(msg.error);
                    }
                });
                ps.send({
                    type: 'start',
                    ...args,
                    name: dependency.id,
                    optimizeModules: false,
                    outFile: dependency.ref,
                    entryModule: dependency.entry,
                    importmap: args.importmap.filter((m) => m !== dependency),
                    _: {},
                    cacheDir,
                });
            });
        }
    }
}
exports.debugPiral = {
    flags(argv) {
        return argv
            .boolean('fresh')
            .describe('fresh', 'Resets the cache before starting the debug mode.')
            .default('fresh', false)
            .string('cache-dir')
            .describe('cache-dir', 'Sets the cache directory for bundling.')
            .default('cache-dir', parcel_1.defaultCacheDir)
            .boolean('scope-hoist')
            .describe('scope-hoist', 'Tries to reduce bundle size by introducing tree shaking.')
            .default('scope-hoist', false)
            .boolean('autoinstall')
            .describe('autoinstall', 'Automatically installs missing Node.js packages.')
            .default('autoinstall', true);
    },
    path: (0, path_1.resolve)(__dirname, 'parcel', 'piral.js'),
    async prepare(args) {
        const { cacheDir = parcel_1.defaultCacheDir, scopeHoist = false, autoInstall = true, fresh = false } = args._;
        const cache = (0, path_1.resolve)(args.root, cacheDir);
        if (fresh) {
            await (0, utils_1.removeDirectory)(cache);
        }
        return {
            ...args,
            _: {},
            cacheDir: cache,
            scopeHoist,
            autoInstall,
        };
    },
};
exports.watchPiral = {
    path: (0, path_1.resolve)(__dirname, 'parcel', 'piral.js'),
};
exports.buildPiral = {
    flags(argv) {
        return argv
            .string('cache-dir')
            .describe('cache-dir', 'Sets the cache directory for bundling.')
            .default('cache-dir', parcel_1.defaultCacheDir)
            .boolean('detailed-report')
            .describe('detailed-report', 'Sets if a detailed report should be created.')
            .default('detailed-report', false)
            .boolean('scope-hoist')
            .describe('scope-hoist', 'Tries to reduce bundle size by introducing tree shaking.')
            .default('scope-hoist', false);
    },
    path: (0, path_1.resolve)(__dirname, 'parcel', 'piral.js'),
    async prepare(args) {
        const { detailedReport = false, scopeHoist = false, cacheDir = parcel_1.defaultCacheDir } = args._;
        const cache = (0, path_1.resolve)(args.root, cacheDir);
        await (0, utils_1.removeDirectory)(cache);
        return {
            ...args,
            _: {},
            cacheDir: cache,
            detailedReport,
            scopeHoist,
        };
    },
};
exports.debugPilet = {
    flags(argv) {
        return argv
            .string('cache-dir')
            .describe('cache-dir', 'Sets the cache directory for bundling.')
            .default('cache-dir', parcel_1.defaultCacheDir)
            .boolean('fresh')
            .describe('fresh', 'Resets the cache before starting the debug mode.')
            .default('fresh', false)
            .boolean('scope-hoist')
            .describe('scope-hoist', 'Tries to reduce bundle size by introducing tree shaking.')
            .default('scope-hoist', false)
            .boolean('autoinstall')
            .describe('autoinstall', 'Automatically installs missing Node.js packages.')
            .default('autoinstall', true);
    },
    path: (0, path_1.resolve)(__dirname, 'parcel', 'pilet.js'),
    async prepare(args) {
        const { cacheDir = parcel_1.defaultCacheDir, scopeHoist = false, autoInstall = true, fresh = false } = args._;
        const cache = (0, path_1.resolve)(args.root, cacheDir);
        if (fresh) {
            await (0, utils_1.removeDirectory)(cache);
        }
        const options = {
            ...args,
            _: {},
            cacheDir: cache,
            scopeHoist,
            autoInstall,
        };
        await buildDependencies(options, cacheDir);
        return options;
    },
};
exports.buildPilet = {
    flags(argv) {
        return argv
            .string('cache-dir')
            .describe('cache-dir', 'Sets the cache directory for bundling.')
            .default('cache-dir', parcel_1.defaultCacheDir)
            .boolean('detailed-report')
            .describe('detailed-report', 'Sets if a detailed report should be created.')
            .default('detailed-report', false)
            .boolean('scope-hoist')
            .describe('scope-hoist', 'Tries to reduce bundle size by introducing tree shaking.')
            .default('scope-hoist', false);
    },
    path: (0, path_1.resolve)(__dirname, 'parcel', 'pilet.js'),
    async prepare(args) {
        const { detailedReport = false, cacheDir = parcel_1.defaultCacheDir, scopeHoist = false } = args._;
        const cache = (0, path_1.resolve)(args.root, cacheDir);
        await (0, utils_1.removeDirectory)(cache);
        const options = {
            ...args,
            _: {},
            cacheDir: cache,
            detailedReport,
            scopeHoist,
        };
        await buildDependencies(options, cacheDir);
        return options;
    },
};
//# sourceMappingURL=actions.js.map